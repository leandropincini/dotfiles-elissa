snippet #
	#{${1:tagName} /}${2}
snippet ##
	#{${1:tagName} ${2:param}} ${3} #{/${1}}
snippet dobody
	#{doBody /}${1}
snippet dolayout
	#{doLayout /}${1}
snippet elseif
	#{elseif ${1:condition}} ${2} #{/elseif}
snippet else
	#{else} ${1} #{/else}
snippet extends
	#{extends '${1:class}' /} ${2}
snippet get
	#{get '${1:param}' /} ${2}
snippet if
	#{if ${1:condition}} ${2} #{/if}
snippet include
	#{include ${1:page} /} ${2}
snippet list
	#{list items:${1:list}, as:'${2:item}'} ${3} #{/list}
snippet set
	#{set ${1:var}: '${2:value}' /}
snippet $
	\$\{${1:expression}}${2}
snippet %
	%{${1:script}}%${2}
snippet *
	*{ ${1:comment} }*${2}
snippet mm
	@ManyToMany
snippet mo
	@ManyToOne
snippet om
	@OneToMany${1:(cascade=CascadeType.ALL)}
snippet oo
	@OneToOne
snippet @
	@{${1:action}}
snippet action
	public static void ${1:index}(${2:args}) { ${3} }
snippet before
	@Before
	static void ${1:intercept}(${2:args}) { ${3} }
snippet debug
	Logger.debug(${1:param});${2}
snippet delete
	DELETE ${1:param}
snippet error
	Logger.error(${1:param});${2}
snippet findall
	List<${1:listName}> ${2:items} = ${1}.findAll();${3}
snippet findbyid
	${1:var} ${2:item} = ${1}.findById(${3});${4}
snippet get
	GET ${1:param}
snippet head
	HEAD ${1:param}
snippet info
	Logger.info(${1:param});${2}
snippet result
	notFound(${1:param});${2}
snippet result
	notFoundIfNull(${1:param});${2}
snippet post
	POST ${1}
snippet v
	public ${1:String} ${2:var}${3:};${4}
snippet put
	PUT ${1}
snippet result
	redirect(${1:page});${2}
snippet r
	render(${1:param});${2}
snippet render
	render(${1:param});${2}
snippet ra
	renderArgs.put("${1}", ${2});${3}
snippet render
	renderBinary(${1:param});${2}
snippet render
	renderJSON(${1:param});${2}
snippet render
	renderXml(${1:param});${2}
snippet result
	unauthorized(${1:param});${2}
snippet unless
	(unless=${1:param})${2}
snippet warn
	Logger.warn($1);${2}

